definitions:
  auth.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResDto:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/user.GetUsersDto'
    type: object
  auth.RegistrationDto:
    properties:
      city:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      telephone_number:
        type: string
    required:
    - email
    - full_name
    - password
    - telephone_number
    type: object
  car.Car:
    properties:
      brand:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      model:
        type: string
      pricePerDay:
        type: number
      rating:
        type: number
      year:
        type: integer
    type: object
  car.CreateCarFormDto:
    properties:
      brand:
        type: string
      id:
        type: string
      model:
        type: string
      price:
        type: number
      year:
        type: integer
    type: object
  car.GetAllCarRatingsDto:
    properties:
      comment:
        type: string
      rating:
        type: number
      user:
        type: string
    type: object
  car.GetCarDto:
    properties:
      car:
        $ref: '#/definitions/car.Car'
      user_id:
        type: string
    type: object
  reservation.TimeDto:
    properties:
      end_date:
        type: string
      start_date:
        type: string
    type: object
  user.ApplicationDto:
    properties:
      filename:
        type: string
      user_id:
        type: string
    type: object
  user.GetAllRatingsDto:
    properties:
      comment:
        type: string
      rated_by:
        type: string
      rating:
        type: number
      user:
        type: string
    type: object
  user.GetUsersDto:
    properties:
      city:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_premium:
        type: boolean
      is_verified:
        type: boolean
      rating:
        type: number
      role:
        type: string
      telephone_number:
        type: string
    type: object
  user.RateDto:
    properties:
      comment:
        type: string
      rating:
        type: number
    required:
    - rating
    type: object
  user.UpdateUserDto:
    properties:
      city:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      telephone_number:
        type: string
    type: object
host: localhost:5000
info:
  contact: {}
  description: P2P service for renting and booking cars
  title: Car Booking Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      description: Endpoint for login users
      parameters:
      - description: Login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResDto'
      summary: Login into user acc
      tags:
      - auth
  /auth/logout:
    get:
      description: Remove cookie so user is log out
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Logout from user acc
      tags:
      - auth
  /auth/refresh:
    get:
      description: If your access token is expired, you need to refresh it using refresh
        token in cookies.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: refresh invalid access token
      tags:
      - auth
  /auth/registration:
    post:
      description: Endpoint for registration users
      parameters:
      - description: Registration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.RegistrationDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Register users
      tags:
      - auth
  /cars:
    get:
      description: Endpoint for getting all cars posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/car.GetCarDto'
            type: array
      summary: GetAllCars
      tags:
      - cars
    post:
      consumes:
      - multipart/form-data
      description: Endpoint for creating car post
      operationId: image
      parameters:
      - description: id
        in: formData
        name: id
        required: true
        type: string
      - description: brand
        in: formData
        name: brand
        required: true
        type: string
      - description: model
        in: formData
        name: model
        required: true
        type: string
      - description: price
        in: formData
        name: price
        required: true
        type: number
      - description: year
        in: formData
        name: year
        required: true
        type: integer
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/car.CreateCarFormDto'
      security:
      - BearerAuth: []
      summary: CreateCar
      tags:
      - cars
  /cars/{id}:
    get:
      description: Endpoint for getting one car info by its id
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/car.GetCarDto'
      summary: GetCar
      tags:
      - cars
  /cars/{id}/rate:
    get:
      description: Endpoint for getting all cars rates
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/car.GetAllCarRatingsDto'
            type: array
      summary: GetAllCarRatings
      tags:
      - cars
    post:
      description: Endpoint for rating cars
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      - description: Rate
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.RateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/car.CreateCarFormDto'
      security:
      - BearerAuth: []
      summary: RateCar
      tags:
      - cars
  /cars/{id}/rent:
    post:
      description: Endpoint for renting cars
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      - description: Times
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/reservation.TimeDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/car.CreateCarFormDto'
      security:
      - BearerAuth: []
      summary: RentCar
      tags:
      - cars
  /health:
    get:
      description: Checking health of backend
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health Check
  /users:
    delete:
      description: Endpoint for deleting users info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: DeleteUser
      tags:
      - users
    get:
      description: Endpoint for getting all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.GetUsersDto'
            type: array
      summary: GetALlUsers
      tags:
      - users
    patch:
      description: Endpoint for updating users info
      parameters:
      - description: Updates
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: UpdateUser
      tags:
      - users
  /users/{id}:
    get:
      description: Endpoint for getting all users
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.GetUsersDto'
      summary: GetOneUserById
      tags:
      - users
  /users/{id}/rate:
    get:
      description: Endpoint for getting all users rates
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.GetAllRatingsDto'
            type: array
      summary: GetAllUserRates
      tags:
      - users
    post:
      description: Endpoint for rating users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Rate
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.RateDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: RateUser
      tags:
      - users
  /users/verify:
    get:
      description: Endpoint for getting all applications to verify
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/user.ApplicationDto'
            type: array
      security:
      - BearerAuth: []
      summary: GetVerify
      tags:
      - users
    post:
      description: Endpoint for getting all applications to verify
      parameters:
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/user.ApplicationDto'
            type: array
      security:
      - BearerAuth: []
      summary: Verify
      tags:
      - users
  /users/verify/{id}:
    post:
      description: Endpoint for rating users
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: VerifyUser
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
